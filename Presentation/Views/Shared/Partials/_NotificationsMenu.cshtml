
@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "";
    var roleName = User.FindFirstValue(ClaimTypes.Role) ?? "";
    var notificationResult = await notificationService.GetNotificationASync(userId, roleName);
    var notifications = notificationResult.Result;
}

<div class="notifications-menu-container">

    <div id="notificationsIcon" data-type="dropdown" data-target="#notificationsDropdown" class="notifications-icon">

        @if (notifications!.Any())
        {
            <div class="notifications-symbol">
                <div class="outer-circle">
                    <div class="inner-red-circle"></div>
                </div>
            </div>
        }

        <i class="bi bi-bell-fill"></i>
        </div>
    </div>

<div id="notificationsDropdown" class="notifications-dropdown-container">

    <header class="menu-header">
        <h1 class="h3">Notifications</h1>
        <div class="notifications-red-circle">
            <span class="notification-number">@notifications!.Count()</span>
        </div>
    </header>


     @if (notifications != null)
    {
        
        <div class="notifications">
            @foreach (var notification in notifications)
            {
                <div class="notification-item-container" data-id="@notification.Id">
                    <img class="image" src="@notification.Image" />
                    <div class="message">@notification.Message</div>
                    <div class="time" data-created="@notification.CreateDate.ToString("s")">@notification.CreateDate</div>
                    <button class="btn btn-close" onclick="dismissNotification('@notification.Id')"></button>
            </div>
            }
         </div>
        
    } 
</div>

<script>
    function removeNotification(notificationId) {
        const element = document.querySelector(`.notification-item-container[data-id="${notificationId}"]`);
        if (element) {
            element.remove();
            updateNotificationCount();
        }
    }

     async function dismissNotification(notificationId) {

            try {

                const res = await fetch(`/api/notifications/dismiss/${notificationId}`, { method: 'POST' })
                if (res.ok) {
                    removeNotification(notificationId)
                }
                else {
                    console.error('Error removing notification')
                }
            }
            catch (error) {
                console.error('Error removing notification: ', error)
            }
        }

        function updateNotificationCount() {
        const notifications = document.querySelector('.notifications');
        const notificationNumber = document.querySelector('.notification-number');
        const notificationDropdownButton = document.getElementById('notificationsIcon');
        const count = notifications.querySelectorAll('.notification-item-container').length;

        if (notificationNumber) {
            notificationNumber.textContent = count;
        }

        let dot = notificationDropdownButton.querySelector('.notifications-symbol');
        if (count > 0 && !dot) {
            dot = document.createElement('div');
            dot.className = 'notifications-symbol';
            notificationDropdownButton.appendChild(dot);
        }

        if (count === 0 && dot) {
            dot.remove();
        }
    }


     const connection = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build()

        connection.on("ReceiveNotification", (notification) => {
            const notifications = document.querySelector('.notifications')

            const item = document.createElement('div')
            item.className = "notification-item-container"
            item.setAttribute('data-id', notification.id)
            item.innerHTML =
            `
            <img class="image" src="${notification.image}" />
            <div class="message">${notification.message}</div>
            <div class="time" data-created="${new Date(notification.createDate).toISOString()}">${notification.createDate}</div>
            <button class="btn btn-close" onclick="dismissNotification('${notification.id}')"></button>
            `
            notifications.insertBefore(item, notifications.firstChild)
            updateRelativeTimes()
            updateNotificationCount()
        })


        connection.start().catch(error => console.error(error))

</script>